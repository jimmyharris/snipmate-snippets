###########################################################################
#                            TextMate Snippets                            #
###########################################################################

global !p
import re
def get_args(arglist):
    args = [arg.split(' ')[-1] for arg in arglist.split(',') if arg]
    pattern = re.compile('\W+', re.L)
    args = [ pattern.sub('', arg) for arg in args ]

    return args

def format_arg(arg):
    return "@param [in] %s TODO: description" % arg

def format_args(args):
    retval = [format_arg(arg) for arg in args if arg != '']
    return retval

endglobal

snippet def "#define ..." !
#define ${1}
endsnippet

snippet ifndef "#ifndef ... #define ... #endif" !
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet #if "#if #endif" !b
#if ${1:0}
${VISUAL:code}$0
#endif
endsnippet

snippet once "Include header once only guard" !
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = ('%s' % (name)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}

#endif /* end of include guard: $1 */

snippet inc "#include local header (inc)" !
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet Inc "#include <> (Inc)" !
#include <${1:.h}>
endsnippet

snippet mark "#pragma mark (mark)" !
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet fund "Function declaration" !
${4:void} $1 (${2:/* arguments */});
endsnippet

snippet fun "Function definition" !
/** ${4:TODO: Brief Description}.
  @ingroup ${5:`!p snip.rv = ( fn or "name")`}

  ${5:TODO: Long Description}
  `!p
if t[2] != "/*arguments*/":
    args = get_args(t[2])
    args = format_args(args)
    snip >> 1
    for arg in args:
        snip += arg
else:
    snip.rv = ""`
  `!p
snip >> 1
if (t[3] not in ["void", ""]):
    snip += "@return TODO"`
 */

${3:void} $1(${2:/*arguments*/})
{
  ${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}

snippet main "main() (main)"!
/** ${4:TODO: Brief Description}.
  @ingroup ${5:`!p snip.rv = ( fn or "name")`}

  ${5:TODO: Long Description}

    @param [in] argc argument count
    @param [in] argv argument list
 */

int main(int argc, char const *argv[])
{
	${0:/* code */}
	return 0;
}
endsnippet

snippet for "for int loop (fori)"
for (${4:size_t} ${2:i} = 0; $2 < ${1:count}; ${3:++$2})
{
	${0:/* code */}
}
endsnippet

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet


snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet do "do...while loop (do)"
do {
	${0:/* code */}
} while(${1:/* condition */});
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet if "if .. (if)"
if (${1:/* condition */})
{
	${0:/* code */}
}
endsnippet

snippet ife "if .. else (ife)"
if (${1:/* condition */})
{
        ${2:/* code */}
}
else
{
        ${3:/* else */}
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
	${0:/* data */}
};
endsnippet

# vim:ft=snippets:
